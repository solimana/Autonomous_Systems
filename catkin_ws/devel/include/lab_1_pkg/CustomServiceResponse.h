// Generated by gencpp from file lab_1_pkg/CustomServiceResponse.msg
// DO NOT EDIT!


#ifndef LAB_1_PKG_MESSAGE_CUSTOMSERVICERESPONSE_H
#define LAB_1_PKG_MESSAGE_CUSTOMSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lab_1_pkg
{
template <class ContainerAllocator>
struct CustomServiceResponse_
{
  typedef CustomServiceResponse_<ContainerAllocator> Type;

  CustomServiceResponse_()
    : out_1()  {
    }
  CustomServiceResponse_(const ContainerAllocator& _alloc)
    : out_1(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _out_1_type;
  _out_1_type out_1;





  typedef boost::shared_ptr< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CustomServiceResponse_

typedef ::lab_1_pkg::CustomServiceResponse_<std::allocator<void> > CustomServiceResponse;

typedef boost::shared_ptr< ::lab_1_pkg::CustomServiceResponse > CustomServiceResponsePtr;
typedef boost::shared_ptr< ::lab_1_pkg::CustomServiceResponse const> CustomServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator1> & lhs, const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.out_1 == rhs.out_1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator1> & lhs, const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lab_1_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e1873e13eae7386f1444629b8c72885";
  }

  static const char* value(const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e1873e13eae7386ULL;
  static const uint64_t static_value2 = 0xf1444629b8c72885ULL;
};

template<class ContainerAllocator>
struct DataType< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab_1_pkg/CustomServiceResponse";
  }

  static const char* value(const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response fields\n"
"string out_1\n"
;
  }

  static const char* value(const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.out_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab_1_pkg::CustomServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "out_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.out_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB_1_PKG_MESSAGE_CUSTOMSERVICERESPONSE_H
